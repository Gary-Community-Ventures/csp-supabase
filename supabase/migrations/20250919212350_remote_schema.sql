create type "public"."Language" as enum ('en', 'es');

create type "public"."Provider Type" as enum ('ffn', 'center', 'lhb');

create type "public"."Status" as enum ('Approved', 'Not Eligible', 'Pending', 'Hold', 'Duplicate', 'Waitlist');


  create table "public"."alembic_version" (
    "version_num" character varying not null
      );


alter table "public"."alembic_version" enable row level security;


  create table "public"."allocated_care_day" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "care_month_allocation_id" bigint,
    "date" date,
    "type" text,
    "amount_cents" numeric,
    "payment_distribution_requested" boolean default false,
    "last_submitted_at" timestamp with time zone,
    "deleted_at" timestamp with time zone,
    "locked_date" timestamp with time zone,
    "updated_at" timestamp with time zone,
    "provider_google_sheets_id" bigint
      );


alter table "public"."allocated_care_day" enable row level security;


  create table "public"."child" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "family_id" bigint,
    "first_name" text,
    "middle_name" text,
    "last_name" text,
    "dob" date,
    "monthly_allocation" numeric not null default '0'::numeric,
    "prorated_allocation" numeric not null default '0'::numeric,
    "status" "Status" not null default 'Pending'::"Status",
    "payment_enabled" boolean not null default false,
    "guardian_name" text,
    "provider_name" text,
    "wishlist" boolean,
    "first_name_norm" text generated always as (lower(COALESCE(first_name, ''::text))) stored,
    "last_name_norm" text generated always as (lower(COALESCE(last_name, ''::text))) stored,
    "race_ethnicity" jsonb,
    "current_care" jsonb,
    "language" jsonb
      );


alter table "public"."child" enable row level security;


  create table "public"."family" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "referred_by" character varying,
    "size" numeric,
    "yearly_income" numeric,
    "zip" text,
    "approved" date,
    "language" text not null,
    "waitlist" boolean,
    "submission_id" text
      );


alter table "public"."family" enable row level security;


  create table "public"."family_application" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "submitted_at" timestamp with time zone,
    "preferred_language" text,
    "referrer_cap_provider" text,
    "first_name_primary" text,
    "last_name_primary" text,
    "dob_primary" date,
    "email_primary" text,
    "phone_primary" text,
    "address_1_primary" text,
    "address_2_primary" text,
    "city_primary" text,
    "state_primary" text,
    "zip_primary" text,
    "race_ethnicity_primary" jsonb,
    "add_additional" boolean,
    "last_name_additional" text,
    "dob_additional" date,
    "email_additional" text,
    "phone_additional" text,
    "address_1_additional" text,
    "address_2_additional" text,
    "city_additional" text,
    "state_additional" text,
    "zip_additional" text,
    "race_ethnicity_additional" jsonb,
    "household_size" numeric,
    "income_monthly_yearly" text,
    "income_yearly" numeric,
    "assets_one_million" boolean,
    "current_childcare_benefits" jsonb,
    "child_first_name_primary" text,
    "child_last_name_primary" text,
    "child_dob_primary" date,
    "child_receiving_care_primary" boolean,
    "child_current_care_primary" jsonb,
    "child_satisfaction_current_care_primary" text,
    "child_satisfaction_current_care_explanation_primary" text,
    "child_hours_per_week_primary" text,
    "child_care_length_primary" text,
    "child_race_ethnicity_primary" jsonb,
    "child_language_primary" jsonb,
    "additional_child" boolean,
    "child_first_name_additional" text,
    "child_last_name_additional" text,
    "child_dob_additional" date,
    "child_receiving_care_additional" boolean,
    "child_current_care_additional" jsonb,
    "child_satisfaction_current_care_additional" text,
    "child_satisfaction_current_care_explanation_additional" text,
    "child_starting_next_month_additional" boolean,
    "child_hours_per_week_additional" text,
    "child_care_length_additional" text,
    "child_race_ethnicity_additional" jsonb,
    "child_language_additional" jsonb,
    "current_benefits_pre-eligibility" jsonb,
    "submission_ip" text,
    "submission_url" text,
    "submission_edit_url" text,
    "last_update_date" text,
    "verification_child_age" text[],
    "proof_of_residence" text[],
    "tc_responsible_for_finding_care" boolean,
    "tc_dependent_on_CAP_approval" boolean,
    "tc_change_providers" boolean,
    "tc_terms_and_conditions" boolean,
    "tc_privacy_policy" boolean,
    "tc_TCPA" boolean,
    "signature" text,
    "photo_release" boolean,
    "timer" text,
    "link_id" text,
    "first_name_additional" text,
    "current_benefits_proof" text[],
    "proof_of_income" text[],
    "child_starting_next_month_primary" boolean,
    "submission_id" text,
    "approved" boolean default false,
    "approved_at" timestamp with time zone,
    "why_need_child_care" jsonb,
    "truv_id_primary" text,
    "truv_id_additional" text,
    "waitlist" boolean,
    "primary_has_income" boolean,
    "other_income_earners" jsonb,
    "truv_ids" text[],
    "child_disabled_primary" boolean,
    "child_disabled_additional" boolean,
    "tc_income_verification" boolean
      );


alter table "public"."family_application" enable row level security;


  create table "public"."family_approval" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "submission_id" text,
    "current_benefits_pre-eligibility" jsonb,
    "current_benefits_qualified" boolean,
    "household_size" numeric,
    "income_yearly" numeric,
    "fpl_350_yearly_2025" numeric,
    "proof_of_income" text,
    "income_qualified" boolean,
    "child_care_length_primary" text,
    "child_care_length_additional" text,
    "child_care_length_qualified" boolean,
    "no_current_childcare_benefits" jsonb,
    "no_current_childcare_benefits_qualified" boolean,
    "state_primary" text,
    "state_additional" text,
    "state_resident_qualified" boolean,
    "zip_primary" text,
    "zip_additional" text,
    "ruca_area_type" text,
    "current_benefits_proof" text[],
    "first_name_primary" text,
    "last_name_primary" text,
    "submitted_at" timestamp with time zone,
    "status" "Status" default 'Pending'::"Status",
    "notes" text,
    "ready_to_approve" boolean default false,
    "child_first_name_primary" text,
    "child_last_name_primary" text,
    "child_primary_id" bigint,
    "child_additional_id" bigint,
    "child_first_name_additional" text,
    "child_last_name_additional" text,
    "child_primary_status" "Status",
    "child_additional_status" "Status"
      );


alter table "public"."family_approval" enable row level security;


  create table "public"."family_invitation" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "public_id" character varying,
    "provider_google_sheet_id" numeric,
    "invite_email" text,
    "email_sent" boolean,
    "sms_sent" boolean,
    "accepted" boolean,
    "opened_at" timestamp with time zone,
    "updated_at" timestamp with time zone
      );


alter table "public"."family_invitation" enable row level security;


  create table "public"."fpl" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "household_size" numeric,
    "fpl_350_yearly_2025" numeric
      );


alter table "public"."fpl" enable row level security;


  create table "public"."guardian" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "type" text,
    "family_id" bigint,
    "first_name" text,
    "last_name" text,
    "email" character varying,
    "phone_number" text,
    "address_1" text,
    "address_2" text,
    "city" text,
    "state" text,
    "zip" text,
    "email_norm" text generated always as (lower((COALESCE(email, ''::character varying))::text)) stored,
    "dob" date,
    "race_ethnicity" jsonb,
    "why_need_child_care" jsonb
      );


alter table "public"."guardian" enable row level security;


  create table "public"."monthly_allocation" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "date" date,
    "allocation_cents" numeric,
    "updated_at" timestamp with time zone,
    "google_sheets_child_id" numeric
      );


alter table "public"."monthly_allocation" enable row level security;


  create table "public"."payment_rate" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "half_day_rate_cents" numeric,
    "full_day_rate_cents" numeric,
    "updated_at" timestamp with time zone,
    "google_sheets_provider_id" numeric,
    "google_sheets_child_id" numeric
      );


alter table "public"."payment_rate" enable row level security;


  create table "public"."payment_request" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "amount_in_cents" numeric,
    "updated_at" timestamp with time zone,
    "care_days_count" numeric,
    "care_day_ids" numeric[],
    "google_sheets_provider_id" numeric,
    "google_sheets_child_id" numeric
      );


alter table "public"."payment_request" enable row level security;


  create table "public"."provider" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "address_1" text,
    "address_2" text,
    "city" text,
    "state" text,
    "zip" text,
    "licensed" boolean,
    "license_number" character varying,
    "license_name" character varying,
    "license_type" character varying,
    "first_name" text,
    "last_name" text,
    "email" text,
    "phone" character varying,
    "care_location_address_1" character varying,
    "care_location_address_2" character varying,
    "care_location_city" text,
    "care_location_state" text,
    "care_location_zip" text,
    "ssn_or_itin" boolean,
    "care_setting" text,
    "related_to_some_children" boolean,
    "related_to_relationship" text,
    "related_to_all_children" boolean,
    "number_of_children" numeric,
    "children_under_2" numeric,
    "cpr_certified" text,
    "other_adults" jsonb,
    "pay_types" jsonb,
    "pay_rate" character varying,
    "pay_per_month" numeric,
    "satisfaction_current_pay" text,
    "satisfaction_current_experience" text,
    "satisfaction_current_experience_explanation" character varying,
    "monthly_rate_0-18" character varying,
    "monthly_rate_19-36" character varying,
    "accepted_forms_of_payment" jsonb,
    "attendance_tracking_system" jsonb,
    "when_families_pay" text,
    "w9" text[],
    "cpr_upload" text[],
    "link_id" text,
    "referrer_cap_family" text,
    "preferred_language" text,
    "status" "Status" not null default 'Pending'::"Status",
    "type" "Provider Type",
    "payment_enabled" boolean not null default false,
    "approved" boolean,
    "waitlist" boolean,
    "approved_at" timestamp with time zone,
    "cpr_training_link" text,
    "child_safety_module_training_completed_at" timestamp with time zone,
    "safe_sleep_for_infants_training_completed_at" timestamp with time zone,
    "home_safety_and_injury_prevention_training_completed_at" timestamp with time zone,
    "cpr_online_training_completed_at" timestamp with time zone,
    "background_check_links" text[]
      );


alter table "public"."provider" enable row level security;


  create table "public"."provider_application" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "application_submitted_at" timestamp with time zone,
    "preferred_language" text,
    "licensed" boolean,
    "license_number" character varying,
    "license_name" character varying,
    "license_type" character varying,
    "first_name" text,
    "last_name" text,
    "email" text,
    "phone" character varying,
    "care_location_address_1" character varying,
    "care_location_address_2" character varying,
    "care_location_city" character varying,
    "care_location_state" text,
    "care_location_zip" text,
    "address_1" character varying,
    "address_2" character varying,
    "city" character varying,
    "state" text,
    "zip" text,
    "ssn_or_itin" boolean,
    "care_setting" text,
    "related_to_some_children" boolean,
    "related_to_relationship" text,
    "related_to_all_children" boolean,
    "number_of_children" numeric,
    "children_under_2" numeric,
    "cpr_certified" text,
    "other_adults" jsonb,
    "pay_types" jsonb,
    "pay_rate" character varying,
    "pay_per_month" numeric,
    "satisfaction_current_pay" text,
    "satisfaction_current_experience" text,
    "satisfaction_current_experience_explanation" character varying,
    "monthly_rate_0-18" character varying,
    "monthly_rate_19-36" character varying,
    "accepted_forms_of_payment" jsonb,
    "attendance_tracking_system" jsonb,
    "when_families_pay" text,
    "gpqc_capabilities" text,
    "gpqc_experienced" text,
    "gpqc_punishment" text,
    "gpqc_parental_access" text,
    "gpqc_children_removed" text,
    "hsce_working_detectors" text,
    "hsce_communicable_diseases" text,
    "hsce_play_areas" text,
    "hsce_protect_from_dangers" text,
    "hsce_disasters" text,
    "hsce_emergencies" text,
    "ccpr_meals" text,
    "ccpr_activities" text,
    "ccpr_medications" text,
    "ccpr_materials_and_equipment" text,
    "ccpr_transportation" text,
    "car_immediately_report" text,
    "car_failure_to_report" text,
    "signature" text,
    "submission_ip" text,
    "submission_url" text,
    "submission_edit_url" text,
    "last_update_date" text,
    "attestation_signature" text,
    "w9" text[],
    "tc_read_form" boolean,
    "tc_asked_questions" boolean,
    "tc_accurate_and_truthful" boolean,
    "tc_background_check" boolean,
    "tc_voluntary_participation" boolean,
    "tc_tcpa" boolean,
    "tc_privacy_policy" boolean,
    "cpr_upload" text[],
    "time_tracker" text,
    "link_id" text,
    "referrer_cap_family" text,
    "tc_terms_and_conditions" boolean,
    "submission_id" text,
    "cares_for_disabled" boolean,
    "current_benefits" jsonb,
    "benefits_impact_follow_up" boolean,
    "id_upload" jsonb
      );


alter table "public"."provider_application" enable row level security;


  create table "public"."provider_approval" (
    "id" bigint generated by default as identity not null,
    "application_submitted_at" timestamp with time zone not null,
    "application_reviewed_at" timestamp with time zone,
    "application_approved_at" timestamp with time zone,
    "safety_attestation_needed" boolean default false,
    "safety_attestation_completed_at" timestamp with time zone,
    "background_check_needed" boolean default false,
    "background_check_submitted_at" timestamp with time zone,
    "background_check_passed_at" character varying,
    "w9_needed" boolean default true,
    "w9_submitted_at" timestamp with time zone,
    "cpr_training_required" boolean default false,
    "cpr_training_completed_at" timestamp with time zone,
    "red_cross_code" character varying,
    "usio_account_created_at" timestamp with time zone,
    "onboarding_call_at" timestamp with time zone,
    "post_payment_survey_sent" timestamp with time zone,
    "first_payment_received_at" timestamp with time zone,
    "notes" character varying,
    "provider_name" text,
    "provider_email" text,
    "provider_phone" text,
    "provider_care_setting" text,
    "submission_id" text,
    "status" "Status" default 'Pending'::"Status",
    "w9_approved_at" timestamp with time zone,
    "w9" text[],
    "attestation_signature" text,
    "cpr_upload" text[],
    "ready_to_approve" boolean generated always as (((provider_care_setting = 'Friends, Family, or Neighbor (FFN)'::text) AND (attestation_signature IS NOT NULL) AND (attestation_signature <> ''::text) AND (background_check_passed_at IS NOT NULL) AND (w9_approved_at IS NOT NULL) AND (cpr_training_completed_at IS NOT NULL))) stored,
    "contact_information" jsonb
      );


alter table "public"."provider_approval" enable row level security;


  create table "public"."provider_child_mapping" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "child_id" bigint not null,
    "provider_id" bigint not null
      );


alter table "public"."provider_child_mapping" enable row level security;


  create table "public"."provider_invitation" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "public_id" character varying,
    "child_google_sheet_id" numeric,
    "invite_email" text,
    "email_sent" boolean,
    "sms_sent" boolean,
    "accepted" boolean,
    "opened_at" timestamp with time zone,
    "updated_at" timestamp with time zone
      );


alter table "public"."provider_invitation" enable row level security;


  create table "public"."ruca" (
    "zip" text not null,
    "state" text,
    "type" text,
    "po_city" text,
    "ruca_area_score" bigint,
    "ruca_core_score" double precision,
    "ruca_area_type" text,
    "ruca_core_type" text
      );


alter table "public"."ruca" enable row level security;

CREATE UNIQUE INDEX "Guardian_pkey" ON public.guardian USING btree (id);

CREATE UNIQUE INDEX alembic_version_pkey ON public.alembic_version USING btree (version_num);

CREATE UNIQUE INDEX allocated_care_day_pkey ON public.allocated_care_day USING btree (id);

CREATE UNIQUE INDEX child_name_dob_family_norm2_ux ON public.child USING btree (first_name_norm, last_name_norm, dob, family_id);

CREATE UNIQUE INDEX child_name_dob_family_norm_ux ON public.child USING btree (lower(COALESCE(first_name, ''::text)), lower(COALESCE(last_name, ''::text)), dob, family_id);

CREATE UNIQUE INDEX child_pkey ON public.child USING btree (id);

CREATE UNIQUE INDEX child_unique_name_dob_family ON public.child USING btree (lower(first_name), lower(last_name), dob, family_id);

CREATE UNIQUE INDEX child_unique_name_dob_family_norm ON public.child USING btree (first_name_norm, last_name_norm, dob, family_id) WHERE ((first_name_norm IS NOT NULL) AND (last_name_norm IS NOT NULL));

CREATE UNIQUE INDEX family_application_pkey ON public.family_application USING btree (id);

CREATE UNIQUE INDEX family_approval_pkey ON public.family_approval USING btree (id);

CREATE UNIQUE INDEX family_approval_submission_id_uniq ON public.family_approval USING btree (submission_id);

CREATE UNIQUE INDEX family_invitation_pkey ON public.family_invitation USING btree (id);

CREATE UNIQUE INDEX family_pkey ON public.family USING btree (id);

CREATE UNIQUE INDEX fpl_pkey ON public.fpl USING btree (id);

CREATE UNIQUE INDEX guardian_family_type_email_norm2_ux ON public.guardian USING btree (family_id, type, email_norm);

CREATE UNIQUE INDEX guardian_family_type_email_norm_ux ON public.guardian USING btree (family_id, type, lower((COALESCE(email, ''::character varying))::text));

CREATE UNIQUE INDEX guardian_unique_family_type_email ON public.guardian USING btree (family_id, type, lower((COALESCE(email, ''::character varying))::text));

CREATE UNIQUE INDEX guardian_unique_family_type_email_norm ON public.guardian USING btree (family_id, type, email_norm) WHERE (email_norm IS NOT NULL);

CREATE UNIQUE INDEX monthly_allocation_pkey ON public.monthly_allocation USING btree (id);

CREATE UNIQUE INDEX payment_rate_pkey ON public.payment_rate USING btree (id);

CREATE UNIQUE INDEX payment_request_pkey ON public.payment_request USING btree (id);

CREATE UNIQUE INDEX provider_application_pkey ON public.provider_application USING btree (id);

CREATE UNIQUE INDEX provider_approval_pkey ON public.provider_approval USING btree (id);

CREATE UNIQUE INDEX provider_approval_red_cross_code_key ON public.provider_approval USING btree (red_cross_code);

CREATE UNIQUE INDEX provider_approval_submission_id_idx ON public.provider_approval USING btree (submission_id);

CREATE UNIQUE INDEX provider_approval_submission_id_uniq ON public.provider_approval USING btree (submission_id);

CREATE UNIQUE INDEX provider_child_mapping_pkey ON public.provider_child_mapping USING btree (id, provider_id, child_id);

CREATE UNIQUE INDEX provider_cpr_training_link_key ON public.provider USING btree (cpr_training_link);

CREATE UNIQUE INDEX provider_invitation_pkey ON public.provider_invitation USING btree (id);

CREATE UNIQUE INDEX provider_pkey ON public.provider USING btree (id);

CREATE UNIQUE INDEX ruca_staging_pkey ON public.ruca USING btree (zip);

alter table "public"."alembic_version" add constraint "alembic_version_pkey" PRIMARY KEY using index "alembic_version_pkey";

alter table "public"."allocated_care_day" add constraint "allocated_care_day_pkey" PRIMARY KEY using index "allocated_care_day_pkey";

alter table "public"."child" add constraint "child_pkey" PRIMARY KEY using index "child_pkey";

alter table "public"."family" add constraint "family_pkey" PRIMARY KEY using index "family_pkey";

alter table "public"."family_application" add constraint "family_application_pkey" PRIMARY KEY using index "family_application_pkey";

alter table "public"."family_approval" add constraint "family_approval_pkey" PRIMARY KEY using index "family_approval_pkey";

alter table "public"."family_invitation" add constraint "family_invitation_pkey" PRIMARY KEY using index "family_invitation_pkey";

alter table "public"."fpl" add constraint "fpl_pkey" PRIMARY KEY using index "fpl_pkey";

alter table "public"."guardian" add constraint "Guardian_pkey" PRIMARY KEY using index "Guardian_pkey";

alter table "public"."monthly_allocation" add constraint "monthly_allocation_pkey" PRIMARY KEY using index "monthly_allocation_pkey";

alter table "public"."payment_rate" add constraint "payment_rate_pkey" PRIMARY KEY using index "payment_rate_pkey";

alter table "public"."payment_request" add constraint "payment_request_pkey" PRIMARY KEY using index "payment_request_pkey";

alter table "public"."provider" add constraint "provider_pkey" PRIMARY KEY using index "provider_pkey";

alter table "public"."provider_application" add constraint "provider_application_pkey" PRIMARY KEY using index "provider_application_pkey";

alter table "public"."provider_approval" add constraint "provider_approval_pkey" PRIMARY KEY using index "provider_approval_pkey";

alter table "public"."provider_child_mapping" add constraint "provider_child_mapping_pkey" PRIMARY KEY using index "provider_child_mapping_pkey";

alter table "public"."provider_invitation" add constraint "provider_invitation_pkey" PRIMARY KEY using index "provider_invitation_pkey";

alter table "public"."ruca" add constraint "ruca_staging_pkey" PRIMARY KEY using index "ruca_staging_pkey";

alter table "public"."allocated_care_day" add constraint "allocated_care_day_care_month_allocation_id_fkey" FOREIGN KEY (care_month_allocation_id) REFERENCES monthly_allocation(id) ON UPDATE CASCADE not valid;

alter table "public"."allocated_care_day" validate constraint "allocated_care_day_care_month_allocation_id_fkey";

alter table "public"."child" add constraint "child_family_id_fkey" FOREIGN KEY (family_id) REFERENCES family(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."child" validate constraint "child_family_id_fkey";

alter table "public"."family_approval" add constraint "family_approval_child_additional_id_fkey" FOREIGN KEY (child_additional_id) REFERENCES child(id) not valid;

alter table "public"."family_approval" validate constraint "family_approval_child_additional_id_fkey";

alter table "public"."family_approval" add constraint "family_approval_child_primary_id_fkey" FOREIGN KEY (child_primary_id) REFERENCES child(id) not valid;

alter table "public"."family_approval" validate constraint "family_approval_child_primary_id_fkey";

alter table "public"."guardian" add constraint "guardian_family_id_fkey" FOREIGN KEY (family_id) REFERENCES family(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."guardian" validate constraint "guardian_family_id_fkey";

alter table "public"."provider" add constraint "provider_cpr_training_link_key" UNIQUE using index "provider_cpr_training_link_key";

alter table "public"."provider_approval" add constraint "provider_approval_red_cross_code_key" UNIQUE using index "provider_approval_red_cross_code_key";

alter table "public"."provider_child_mapping" add constraint "provider_child_mapping_child_id_fkey" FOREIGN KEY (child_id) REFERENCES child(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."provider_child_mapping" validate constraint "provider_child_mapping_child_id_fkey";

alter table "public"."provider_child_mapping" add constraint "provider_child_mapping_provider_id_fkey" FOREIGN KEY (provider_id) REFERENCES provider(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."provider_child_mapping" validate constraint "provider_child_mapping_provider_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.family_fnc_calculate_350_fpl()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  UPDATE family_approval
  SET fpl_350_yearly_2025 = f.fpl_350_yearly_2025
  FROM fpl f
  WHERE family_approval.household_size = f.household_size;
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.family_fnc_normalize_from_new_applications()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
declare
  v_family_id      bigint;
  v_guardian_name  text;
  v_sub_id         text;   -- trimmed submission id (text)
begin
  -- Normalize and validate submission_id
  v_sub_id := nullif(btrim(new.submission_id), '');
  if v_sub_id is null or v_sub_id !~ '^\d+$' then
    raise exception 'family_application.submission_id (%) must be a numeric string to use as family.id (bigint).',
      new.submission_id;
  end if;

  v_family_id     := v_sub_id::bigint;
  v_guardian_name := coalesce(new.last_name_primary,'') || ', ' || coalesce(new.first_name_primary,'');

  ------------------------------------------------------------------
  -- FAMILY (id = submission_id; created_at = family_application.created_at)
  ------------------------------------------------------------------
  insert into public.family (
    id, created_at, referred_by, size, yearly_income, zip, approved,
    language, waitlist, submission_id
  )
  overriding system value
  values (
    v_family_id, new.created_at, new.referrer_cap_provider, new.household_size,
    new.income_yearly, new.zip_primary,
    case when coalesce(new.approved,false) then current_date else null end,
    new.preferred_language, new.waitlist, v_sub_id
  )
  on conflict (id) do update set
    created_at    = excluded.created_at,
    referred_by   = excluded.referred_by,
    size          = excluded.size,
    yearly_income = excluded.yearly_income,
    zip           = excluded.zip,
    approved      = excluded.approved,
    language      = excluded.language,
    waitlist      = excluded.waitlist,
    submission_id = excluded.submission_id;

  -- Ensure submission_id set even if policy limited the upsert
  update public.family
     set submission_id = v_sub_id
   where id = v_family_id
     and (submission_id is distinct from v_sub_id);

  ------------------------------------------------------------------
  -- GUARDIAN (PRIMARY)  -- ON CONFLICT matches (family_id, type, email_norm)
  -- Also sets race_ethnicity and why_need_child_care (jsonb)
  ------------------------------------------------------------------
  if (new.first_name_primary is not null or new.last_name_primary is not null
      or new.email_primary is not null or new.phone_primary is not null
      or new.race_ethnicity_primary is not null or new.why_need_child_care is not null) then
    insert into public.guardian (
      created_at, type, family_id,
      first_name, last_name, email, phone_number,
      address_1, address_2, city, state, zip,
      race_ethnicity, why_need_child_care
    )
    values (
      new.created_at, 'primary', v_family_id,
      new.first_name_primary, new.last_name_primary, new.email_primary, new.phone_primary,
      new.address_1_primary, new.address_2_primary, new.city_primary, new.state_primary, new.zip_primary,
      nullif(btrim(new.race_ethnicity_primary::text), '')::jsonb,
      nullif(btrim(new.why_need_child_care::text), '')::jsonb
    )
    on conflict (family_id, type, email_norm) do update set
      created_at         = excluded.created_at,
      first_name         = excluded.first_name,
      last_name          = excluded.last_name,
      phone_number       = excluded.phone_number,
      address_1          = excluded.address_1,
      address_2          = excluded.address_2,
      city               = excluded.city,
      state              = excluded.state,
      zip                = excluded.zip,
      race_ethnicity     = excluded.race_ethnicity,
      why_need_child_care= excluded.why_need_child_care;
  end if;

  ------------------------------------------------------------------
  -- GUARDIAN (ADDITIONAL) -- skip entirely if add_additional = false
  -- Also sets race_ethnicity and why_need_child_care (jsonb)
  -- ON CONFLICT matches (family_id, type, email_norm)
  ------------------------------------------------------------------
  if coalesce(new.add_additional, false) and
     (new.first_name_additional is not null or new.last_name_additional is not null
      or new.email_additional is not null or new.phone_additional is not null
      or new.race_ethnicity_additional is not null or new.why_need_child_care is not null) then
    insert into public.guardian (
      created_at, type, family_id,
      first_name, last_name, email, phone_number,
      address_1, address_2, city, state, zip,
      race_ethnicity, why_need_child_care
    )
    values (
      new.created_at, 'additional', v_family_id,
      new.first_name_additional, new.last_name_additional, new.email_additional, new.phone_additional,
      new.address_1_additional, new.address_2_additional, new.city_additional, new.state_additional, new.zip_additional,
      nullif(btrim(new.race_ethnicity_additional::text), '')::jsonb,
      nullif(btrim(new.why_need_child_care::text), '')::jsonb
    )
    on conflict (family_id, type, email_norm) do update set
      created_at         = excluded.created_at,
      first_name         = excluded.first_name,
      last_name          = excluded.last_name,
      phone_number       = excluded.phone_number,
      address_1          = excluded.address_1,
      address_2          = excluded.address_2,
      city               = excluded.city,
      state              = excluded.state,
      zip                = excluded.zip,
      race_ethnicity     = excluded.race_ethnicity,
      why_need_child_care= excluded.why_need_child_care;
  end if;

  ------------------------------------------------------------------
  -- CHILD (PRIMARY) -- ON CONFLICT matches (first_name_norm, last_name_norm, dob, family_id)
  -- Now also sets current_care, race_ethnicity, language (jsonb)
  ------------------------------------------------------------------
  if (new.child_first_name_primary is not null or new.child_last_name_primary is not null) then
    insert into public.child (
      created_at, family_id, first_name, middle_name, last_name, dob, guardian_name,
      current_care, race_ethnicity, language
    )
    values (
      new.created_at, v_family_id, new.child_first_name_primary, null, new.child_last_name_primary,
      new.child_dob_primary, v_guardian_name,
      nullif(btrim(new.child_current_care_primary::text), '')::jsonb,
      nullif(btrim(new.child_race_ethnicity_primary::text), '')::jsonb,
      nullif(btrim(new.child_language_primary::text), '')::jsonb
    )
    on conflict (first_name_norm, last_name_norm, dob, family_id) do update set
      created_at    = excluded.created_at,
      guardian_name = excluded.guardian_name,
      current_care  = excluded.current_care,
      race_ethnicity= excluded.race_ethnicity,
      language      = excluded.language;
  end if;

  ------------------------------------------------------------------
  -- CHILD (ADDITIONAL) -- ON CONFLICT matches (first_name_norm, last_name_norm, dob, family_id)
  -- Now also sets current_care, race_ethnicity, language (jsonb)
  ------------------------------------------------------------------
  if (new.child_first_name_additional is not null or new.child_last_name_additional is not null) then
    insert into public.child (
      created_at, family_id, first_name, middle_name, last_name, dob, guardian_name,
      current_care, race_ethnicity, language
    )
    values (
      new.created_at, v_family_id, new.child_first_name_additional, null, new.child_last_name_additional,
      new.child_dob_additional, v_guardian_name,
      nullif(btrim(new.child_current_care_additional::text), '')::jsonb,
      nullif(btrim(new.child_race_ethnicity_additional::text), '')::jsonb,
      nullif(btrim(new.child_language_additional::text), '')::jsonb
    )
    on conflict (first_name_norm, last_name_norm, dob, family_id) do update set
      created_at    = excluded.created_at,
      guardian_name = excluded.guardian_name,
      current_care  = excluded.current_care,
      race_ethnicity= excluded.race_ethnicity,
      language      = excluded.language;
  end if;

  return new;
end
$function$
;

CREATE OR REPLACE FUNCTION public.family_fnc_set_ready_to_approve()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
begin
  if new.current_benefits_qualified = true then
    new.ready_to_approve := true;

  elsif new.income_qualified = true
    and (
      coalesce(new.state_primary, '') = 'Colorado'
      or coalesce(new.state_additional, '') = 'Colorado'
    )
    and new.no_current_childcare_benefits_qualified = true
    and (
      coalesce(new.child_care_length_primary, '') = '9 months or more'
      or coalesce(new.child_care_length_additional, '') = '9 months or more'
    )
  then
    new.ready_to_approve := true;

  else
    new.ready_to_approve := false;
  end if;

  return new;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.family_fnc_sync_income_qualified()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  NEW.income_qualified := (NEW.income_yearly <= NEW.fpl_350_yearly_2025);
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.family_fnc_sync_no_child_care_benefits_qualified()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
  NEW.no_current_childcare_benefits_qualified :=
    NOT (
      COALESCE( (NEW.no_current_childcare_benefits->>'dpp')::boolean, false )
   OR COALESCE( (NEW.no_current_childcare_benefits->>'upk')::boolean, false )
   OR COALESCE( (NEW.no_current_childcare_benefits->>'cccap')::boolean, false )
   OR COALESCE( (NEW.no_current_childcare_benefits->>'headstart')::boolean, false )
    );
  RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.provider_fnc_normalize_from_new_applications()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
declare
  v_submitted_at timestamptz;
  v_name         text;
  v_care_setting text;

  v_licensed     boolean;
  v_type         text;      -- <- NEW

  v_sat_needed   boolean;
  v_bgc_needed   boolean;
  v_w9_needed    boolean := true;
  v_cpr_needed   boolean;

  v_sat_done_at  timestamptz;
  v_bgc_sub_at   timestamptz;
  v_w9_sub_at    timestamptz;
  v_cpr_done_at  timestamptz;

  v_contact      jsonb;

  -- formatted addresses
  v_care_addr_raw text;
  v_bus_addr_raw  text;
  v_care_addr     text;
  v_bus_addr      text;
begin
  -- Use application_submitted_at (fallback now)
  v_submitted_at := coalesce(new.application_submitted_at, now());

  -- Provider name rule
  v_name := coalesce(nullif(new.license_name, ''),
                     nullif(new.last_name, '') || ', ' || nullif(new.first_name, ''));

  -- licensed flag rule (prefer explicit boolean if present, fallback to license_type presence)
  v_licensed := coalesce(new.licensed, nullif(new.license_type,'') is not null);

  -- NEW: provider type rule
  v_type := case
              when new.licensed is true  and new.license_type = 'Child Care Center License'
                then 'center'
              when new.licensed is true  and new.license_type = 'Family Child Care Home (FCCH)'
                then 'lhb'
              when new.licensed is false
                then 'ffn'
              else 'ffn'  -- fallback; change to NULL if you prefer no default
            end;

  -- Care setting & dependent flags
  v_care_setting := coalesce(nullif(new.license_type, ''), 'Friends, Family, or Neighbor (FFN)');
  v_sat_needed := (v_care_setting = 'Friends, Family, or Neighbor (FFN)');
  v_bgc_needed := (v_care_setting = 'Friends, Family, or Neighbor (FFN)');
  v_cpr_needed := (v_care_setting = 'Friends, Family, or Neighbor (FFN)');

  -- Derived timestamps
  v_sat_done_at := case when v_sat_needed and new.attestation_signature is not null then v_submitted_at else null end;
  v_bgc_sub_at  := case when v_bgc_needed then v_submitted_at else null end;
  v_w9_sub_at   := case when v_w9_needed and new.w9 is not null then v_submitted_at else null end;
  v_cpr_done_at := case when v_cpr_needed and new.cpr_upload is not null then v_submitted_at else null end;

  ------------------------------------------------------------------
  -- Address formatting (unchanged)
  ------------------------------------------------------------------
  v_care_addr_raw :=
    nullif(
      btrim(
        concat_ws(
          ', ',
          nullif(btrim(initcap(concat_ws(' ',
            nullif(new.care_location_address_1,''),
            nullif(new.care_location_address_2,'')))), ''),
          nullif(btrim(initcap(new.care_location_city)), ''),
          nullif(btrim(upper(new.care_location_state)), '')
        )
        ||
        case when coalesce(new.care_location_zip,'') <> '' then ' ' || btrim(new.care_location_zip) else '' end
      ),
      ''
    );

  v_care_addr := nullif(regexp_replace(coalesce(v_care_addr_raw,''), '\s+', ' ', 'g'), '');

  v_bus_addr_raw :=
    nullif(
      btrim(
        concat_ws(
          ', ',
          nullif(btrim(initcap(concat_ws(' ',
            nullif(new.address_1,''),
            nullif(new.address_2,'')))), ''),
          nullif(btrim(initcap(new.city)), ''),
          nullif(btrim(upper(new.state)), '')
        )
        ||
        case when coalesce(new.zip,'') <> '' then ' ' || btrim(new.zip) else '' end
      ),
      ''
    );

  v_bus_addr := nullif(regexp_replace(coalesce(v_bus_addr_raw,''), '\s+', ' ', 'g'), '');

  if v_care_addr is null and v_bus_addr is not null then
    v_care_addr := v_bus_addr;
  elsif v_bus_addr is null and v_care_addr is not null then
    v_bus_addr := v_care_addr;
  end if;

  -- contact_information JSONB
  v_contact := jsonb_build_object(
    'Applied',               v_submitted_at,
    'Primary Contact',       concat_ws(', ', nullif(new.last_name,''), nullif(new.first_name,'')),
    'Preferred Language',    new.preferred_language,
    'License #',             new.license_number,
    'Email',                 new.email,
    'Phone',                 new.phone,
    'Care Location',         to_jsonb(v_care_addr),
    'Business Address',      to_jsonb(v_bus_addr)
  );

  ------------------------------------------------------------------
  -- PROVIDER upsert (now includes "type")
  ------------------------------------------------------------------
  insert into public.provider (
    id, created_at,
    name,
    licensed,
    "type",                    -- <- NEW
    address_1, address_2, city, state, zip,
    license_number, license_name, license_type,
    first_name, last_name, email, phone,
    care_location_address_1, care_location_address_2, care_location_city, care_location_state, care_location_zip,
    ssn_or_itin, care_setting,
    related_to_some_children, related_to_relationship, related_to_all_children,
    number_of_children, children_under_2,
    cpr_certified, other_adults,
    pay_types, pay_rate, pay_per_month,
    satisfaction_current_pay, satisfaction_current_experience, satisfaction_current_experience_explanation,
    "monthly_rate_0-18", "monthly_rate_19-36",
    accepted_forms_of_payment, attendance_tracking_system, when_families_pay,
    w9, cpr_upload, link_id, referrer_cap_family, preferred_language
  )
  overriding system value
  values (
    new.id, v_submitted_at,
    v_name,
    v_licensed,
    v_type,                   -- <- NEW
    new.address_1, new.address_2, new.city, new.state, new.zip,
    new.license_number, new.license_name, new.license_type,
    new.first_name, new.last_name, new.email, new.phone,
    new.care_location_address_1, new.care_location_address_2, new.care_location_city, new.care_location_state, new.care_location_zip,
    new.ssn_or_itin, new.care_setting,
    new.related_to_some_children, new.related_to_relationship, new.related_to_all_children,
    new.number_of_children, new.children_under_2,
    new.cpr_certified, new.other_adults,
    new.pay_types, new.pay_rate, new.pay_per_month,
    new.satisfaction_current_pay, new.satisfaction_current_experience, new.satisfaction_current_experience_explanation,
    new."monthly_rate_0-18", new."monthly_rate_19-36",
    new.accepted_forms_of_payment, new.attendance_tracking_system, new.when_families_pay,
    new.w9, new.cpr_upload, new.link_id, new.referrer_cap_family, new.preferred_language
  )
  on conflict (id) do update set
    created_at  = excluded.created_at,
    name        = excluded.name,
    licensed    = excluded.licensed,
    "type"      = excluded."type",         -- <- NEW
    address_1   = excluded.address_1,
    address_2   = excluded.address_2,
    city        = excluded.city,
    state       = excluded.state,
    zip         = excluded.zip,
    license_number = excluded.license_number,
    license_name   = excluded.license_name,
    license_type   = excluded.license_type,
    first_name  = excluded.first_name,
    last_name   = excluded.last_name,
    email       = excluded.email,
    phone       = excluded.phone,
    care_location_address_1 = excluded.care_location_address_1,
    care_location_address_2 = excluded.care_location_address_2,
    care_location_city      = excluded.care_location_city,
    care_location_state     = excluded.care_location_state,
    care_location_zip       = excluded.care_location_zip,
    ssn_or_itin    = excluded.ssn_or_itin,
    care_setting   = excluded.care_setting,
    related_to_some_children = excluded.related_to_some_children,
    related_to_relationship  = excluded.related_to_relationship,
    related_to_all_children  = excluded.related_to_all_children,
    number_of_children       = excluded.number_of_children,
    children_under_2         = excluded.children_under_2,
    cpr_certified            = excluded.cpr_certified,
    other_adults             = excluded.other_adults,
    pay_types                = excluded.pay_types,
    pay_rate                 = excluded.pay_rate,
    pay_per_month            = excluded.pay_per_month,
    satisfaction_current_pay = excluded.satisfaction_current_pay,
    satisfaction_current_experience = excluded.satisfaction_current_experience,
    satisfaction_current_experience_explanation = excluded.satisfaction_current_experience_explanation,
    "monthly_rate_0-18"      = excluded."monthly_rate_0-18",
    "monthly_rate_19-36"     = excluded."monthly_rate_19-36",
    accepted_forms_of_payment = excluded.accepted_forms_of_payment,
    attendance_tracking_system = excluded.attendance_tracking_system,
    when_families_pay        = excluded.when_families_pay,
    w9                       = excluded.w9,
    cpr_upload               = excluded.cpr_upload,
    link_id                  = excluded.link_id,
    referrer_cap_family      = excluded.referrer_cap_family,
    preferred_language       = excluded.preferred_language;

  ------------------------------------------------------------------
  -- PROVIDER_APPROVAL upsert (unchanged except earlier context)
  ------------------------------------------------------------------
  insert into public.provider_approval (
    submission_id,
    application_submitted_at,
    provider_name,
    provider_email,
    provider_phone,
    provider_care_setting,

    safety_attestation_needed,
    safety_attestation_completed_at,

    background_check_needed,
    background_check_submitted_at,

    w9_needed,
    w9_submitted_at,

    cpr_training_required,
    cpr_training_completed_at,

    status,
    contact_information
  )
  values (
    new.submission_id,
    v_submitted_at,
    v_name,
    new.email,
    new.phone,
    v_care_setting,

    v_sat_needed,
    v_sat_done_at,

    v_bgc_needed,
    v_bgc_sub_at,

    v_w9_needed,
    v_w9_sub_at,

    v_cpr_needed,
    v_cpr_done_at,

    'Pending',
    v_contact
  )
  on conflict (submission_id) do update set
    application_submitted_at        = excluded.application_submitted_at,
    provider_name                   = excluded.provider_name,
    provider_email                  = excluded.provider_email,
    provider_phone                  = excluded.provider_phone,
    provider_care_setting           = excluded.provider_care_setting,
    safety_attestation_needed       = excluded.safety_attestation_needed,
    safety_attestation_completed_at = excluded.safety_attestation_completed_at,
    background_check_needed         = excluded.background_check_needed,
    background_check_submitted_at   = excluded.background_check_submitted_at,
    w9_needed                       = excluded.w9_needed,
    w9_submitted_at                 = excluded.w9_submitted_at,
    cpr_training_required           = excluded.cpr_training_required,
    cpr_training_completed_at       = excluded.cpr_training_completed_at,
    status                          = excluded.status,
    contact_information             = excluded.contact_information;

  return new;
end
$function$
;

CREATE OR REPLACE FUNCTION public.provider_fnc_set_w9_upload_timestamp()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
begin
  -- Only fire if w9 is updated and contains something like "www."
  if new.w9 is distinct from old.w9
     and exists (
       select 1
       from unnest(new.w9) as f(val)
       where val ~ 'www\.'
     )
  then
    update public.provider
       set w9_approved_at = now()
     where id = new.id;
  end if;

  return new;
end;
$function$
;


  create policy "Reporting"
  on "public"."alembic_version"
  as permissive
  for select
  to looker_user
using (true);



  create policy "Reporting"
  on "public"."allocated_care_day"
  as permissive
  for select
  to looker_user
using (true);



  create policy "Reporting"
  on "public"."child"
  as permissive
  for select
  to looker_user
using (true);



  create policy "Reporting"
  on "public"."family"
  as permissive
  for select
  to looker_user
using (true);



  create policy "Reporting"
  on "public"."family_application"
  as permissive
  for select
  to looker_user
using (true);



  create policy "Reporting"
  on "public"."family_invitation"
  as permissive
  for select
  to public
using (true);



  create policy "Reporting"
  on "public"."guardian"
  as permissive
  for select
  to looker_user
using (true);



  create policy "Reporting"
  on "public"."monthly_allocation"
  as permissive
  for select
  to public
using (true);



  create policy "Reporting"
  on "public"."payment_rate"
  as permissive
  for select
  to looker_user
using (true);



  create policy "Reporting"
  on "public"."payment_request"
  as permissive
  for select
  to looker_user
using (true);



  create policy "Reporting"
  on "public"."provider"
  as permissive
  for select
  to looker_user
using (true);



  create policy "Reporting"
  on "public"."provider_application"
  as permissive
  for select
  to looker_user
using (true);



  create policy "Reporting"
  on "public"."provider_child_mapping"
  as permissive
  for select
  to looker_user
using (true);



  create policy "Reporting"
  on "public"."provider_invitation"
  as permissive
  for select
  to looker_user
using (true);


CREATE TRIGGER family_trg_normalize_from_new_applications AFTER INSERT ON public.family_application FOR EACH ROW EXECUTE FUNCTION family_fnc_normalize_from_new_applications();

CREATE TRIGGER family_trg_calculate_350_fpl AFTER INSERT OR UPDATE OF household_size ON public.family_approval FOR EACH ROW EXECUTE FUNCTION family_fnc_calculate_350_fpl();

CREATE TRIGGER family_trg_set_ready_to_approve BEFORE INSERT OR UPDATE ON public.family_approval FOR EACH ROW EXECUTE FUNCTION family_fnc_set_ready_to_approve();

CREATE TRIGGER family_trg_sync_income_qualified BEFORE INSERT OR UPDATE OF income_yearly, fpl_350_yearly_2025 ON public.family_approval FOR EACH ROW EXECUTE FUNCTION family_fnc_sync_income_qualified();

CREATE TRIGGER family_trg_sync_no_child_care_benefits_qualified BEFORE INSERT OR UPDATE OF no_current_childcare_benefits ON public.family_approval FOR EACH ROW EXECUTE FUNCTION family_fnc_sync_no_child_care_benefits_qualified();

CREATE TRIGGER "New Guardian" AFTER INSERT ON public.guardian FOR EACH ROW EXECUTE FUNCTION supabase_functions.http_request('https://udhfqrqfcnakpijljftg.supabase.co/functions/v1/family-inserted', 'POST', '{"Content-type":"application/json","Authorization":"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVkaGZxcnFmY25ha3BpamxqZnRnIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTczMTA0MywiZXhwIjoyMDcxMzA3MDQzfQ.ybx-lTf25n2Rl2yWSx3e0VxgSK_1zkqg0uNh37WK3Zc"}', '{}', '10000');

CREATE TRIGGER "New Provider" AFTER INSERT ON public.provider FOR EACH ROW EXECUTE FUNCTION supabase_functions.http_request('https://udhfqrqfcnakpijljftg.supabase.co/functions/v1/provider-inserted', 'POST', '{"Content-type":"application/json","Authorization":"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVkaGZxcnFmY25ha3BpamxqZnRnIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTczMTA0MywiZXhwIjoyMDcxMzA3MDQzfQ.ybx-lTf25n2Rl2yWSx3e0VxgSK_1zkqg0uNh37WK3Zc"}', '{}', '10000');

CREATE TRIGGER provider_trg_set_w9_upload_timestamp AFTER UPDATE OF w9 ON public.provider FOR EACH ROW EXECUTE FUNCTION provider_fnc_set_w9_upload_timestamp();

CREATE TRIGGER provider_trg_normalize_from_new_applications AFTER INSERT ON public.provider_application FOR EACH ROW EXECUTE FUNCTION provider_fnc_normalize_from_new_applications();


